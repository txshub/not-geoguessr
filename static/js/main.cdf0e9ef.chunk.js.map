{"version":3,"sources":["components/StreetView/streetView.jsx","components/SelectionMap/selectionMap.jsx","components/DrawerButton/drawerButton.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","display","streetViewInitialLocation","lat","lng","streetViewMapStyles","height","zIndex","StreetView","props","streetViewOptions","addressControl","fullscreenControl","enableCloseButton","linksControl","showRoadLabels","panControl","panControlOptions","position","window","google","maps","ControlPosition","LEFT_BOTTOM","zoomControl","zoomControlOptions","console","log","mapContainerStyle","id","zoom","center","visible","options","selectionMap","flexDirection","right","bottom","width","opacity","transition","marginBottom","marginRight","mapContainer","border","borderColor","mapOptions","disableDefaultUI","minZoom","draggableCursor","restriction","latLngBounds","north","south","west","east","strictBounds","SelectionMap","classes","useState","selected","setSelected","selectedPosition","setSelectedPosition","googleMap","useRef","className","ref","clickableIcons","onClick","event","latLng","current","state","map","panTo","clickable","Button","style","backgroundColor","disabled","drawer","typography","flexGrow","drawerButton","left","marginLeft","padding","DrawerButton","drawerOpen","setDrawerOpen","toggleDrawer","open","color","variant","ExpandMore","SwipeableDrawer","anchor","onClose","onOpen","swipeAreaWidth","Toolbar","Typography","App","apiKey","process","NGG_API_KEY","googleMapsApiKey","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cdf0e9ef.chunk.js","sourcesContent":["import React from 'react'\nimport { GoogleMap, StreetViewPanorama } from '@react-google-maps/api'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  '@global': {\n    'a[href^=\"http://maps.google.com/maps\"]': { display: 'none !important' },\n    'a[href^=\"https://maps.google.com/maps\"]': { display: 'none !important' }\n  }\n})\n\nconst streetViewInitialLocation = {\n  // lat: Math.random() * (90 + 90) - 90,\n  // lng: Math.random() * (180 + 180) - 180\n  lat: 51.072776,\n  lng: -1.313851\n}\n\nconst streetViewMapStyles = {\n  height: '100vh',\n  zIndex: 0\n}\n\nexport default function StreetView (props) {\n  useStyles()\n\n  const streetViewOptions = {\n    addressControl: false,\n    fullscreenControl: false,\n    enableCloseButton: false,\n    linksControl: false,\n    showRoadLabels: false,\n    panControl: true, // Otherwise, it disappears on small screens\n    panControlOptions: {\n      position: window.google.maps.ControlPosition.LEFT_BOTTOM // Find a cleaner way to do this\n    },\n    zoomControl: true,\n    zoomControlOptions: {\n      position: window.google.maps.ControlPosition.LEFT_BOTTOM\n    }\n  }\n\n  console.log('WHY')\n  return (\n    <GoogleMap\n      mapContainerStyle={streetViewMapStyles}\n      id='streetview-map'\n      zoom={7}\n      center={streetViewInitialLocation}\n    >\n      <StreetViewPanorama\n        position={streetViewInitialLocation}\n        visible\n        options={streetViewOptions}\n      />\n    </GoogleMap>\n  )\n}\n\nStreetView.propTypes = {}\n","import React, { useState, useRef } from 'react'\nimport { GoogleMap, Marker } from '@react-google-maps/api'\nimport { Button, makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles({\n  selectionMap: {\n    display: 'flex',\n    flexDirection: 'column',\n    position: 'absolute',\n    right: 0,\n    bottom: 0,\n    height: '300px',\n    width: '300px',\n    opacity: '50%',\n    transition: 'all .2s linear',\n    zIndex: 10,\n    marginBottom: '20px',\n    marginRight: '20px',\n    '&:hover': {\n      opacity: '100%',\n      height: '500px',\n      width: '500px'\n    }\n  },\n  mapContainer: {\n    position: 'relative',\n    height: '100%',\n    width: 'auto',\n    border: 'solid',\n    borderColor: 'rgba(0, 0, 0, 1)',\n    marginBottom: '3px'\n  }\n})\n\nconst mapOptions = {\n  disableDefaultUI: true,\n  minZoom: 1,\n  draggableCursor: 'crosshair',\n  restriction: {\n    latLngBounds: {\n      north: 85, // For some reason this is not 90 in google maps\n      south: -85,\n      west: -180,\n      east: 180\n    },\n    strictBounds: false\n  }\n}\n\nconst mapContainerStyle = {\n  height: '100%',\n  width: '100%'\n}\n\nexport default function SelectionMap (props) {\n  const classes = useStyles()\n  const [selected, setSelected] = useState(false)\n  const [selectedPosition, setSelectedPosition] = useState(null)\n\n  const googleMap = useRef()\n\n  const handleMapClick = event => {\n    if (!selected) {\n      setSelected(true)\n    }\n    setSelectedPosition(event.latLng)\n    googleMap.current.state.map.panTo(event.latLng)\n  }\n\n  return (\n    <div className={classes.selectionMap}>\n      <div className={classes.mapContainer}>\n        <GoogleMap\n          id='selection-map'\n          ref={googleMap}\n          mapContainerStyle={mapContainerStyle}\n          zoom={2}\n          center={{ lat: 0, lng: 0 }}\n          clickableIcons={false}\n          options={mapOptions}\n          onClick={handleMapClick}\n        >\n          <Marker\n            visible={selected}\n            position={selectedPosition}\n            clickable={false}\n          />\n        </GoogleMap>\n      </div>\n      <Button style={{ backgroundColor: 'red' }} disabled={!selected}>Select Location</Button>\n    </div>\n\n  )\n}\n\nSelectionMap.propTypes = {}\n","import React, { useState } from 'react'\nimport { Typography, Toolbar, Button, SwipeableDrawer, makeStyles } from '@material-ui/core'\nimport { ExpandMore } from '@material-ui/icons'\n\nconst useStyles = makeStyles({\n  drawer: {\n    display: 'flex'\n  },\n  typography: {\n    flexGrow: 1\n  },\n  drawerButton: {\n    position: 'absolute',\n    width: 'fit-content',\n    left: 0,\n    right: 0,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    padding: '0px',\n    zIndex: 1300,\n    opacity: '70%',\n    transition: '0.2s',\n    '@media (pointer: coarse), (hover: none)': {\n      zIndex: 2\n    },\n    '&:hover': {\n      opacity: '100%'\n    }\n  }\n})\n\nexport default function DrawerButton (props) {\n  const classes = useStyles()\n  const [drawerOpen, setDrawerOpen] = useState(false)\n\n  const toggleDrawer = (open) => () => {\n    setDrawerOpen(open)\n  }\n\n  return (\n    <div>\n      <Button\n        className={classes.drawerButton}\n        onClick={toggleDrawer(true)}\n        color='inherit'\n        variant='contained'\n      >\n        <ExpandMore />\n      </Button>\n      <SwipeableDrawer\n        className={classes.drawer}\n        anchor='top'\n        open={drawerOpen}\n        onClose={toggleDrawer(false)}\n        onOpen={toggleDrawer(true)}\n        swipeAreaWidth={50}\n      >\n        <Toolbar>\n          <Typography className={classes.typography} variant='h4'>Not Geoguessr</Typography>\n        </Toolbar>\n      </SwipeableDrawer>\n    </div>\n  )\n}\n","import React from 'react'\nimport { LoadScript } from '@react-google-maps/api'\nimport StreetView from '../src/components/StreetView/streetView'\nimport SelectionMap from '../src/components/SelectionMap/selectionMap'\nimport DrawerButton from '../src/components/DrawerButton/drawerButton'\n\nexport default function App () {\n  // The API key appears in the call to the Google Maps API, and this is something enforced by Google.\n  // So hiding it is futile.\n  // However, there are restrictions in place for this key.\n  const apiKey = process.env.NGG_API_KEY ? process.env.NGG_API_KEY : 'AIzaSyAvSjPZw74KA5TCZ_BniFLVxSERndb8S3A'\n\n  const game = () => {\n    return (\n      <LoadScript id='script-loader' googleMapsApiKey={apiKey}>\n        <StreetView />\n        <SelectionMap />\n      </LoadScript>\n    )\n  }\n  return (\n    <div className='App'>\n      <DrawerButton />\n      {game()}\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}