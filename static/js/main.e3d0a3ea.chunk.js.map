{"version":3,"sources":["components/StreetView/streetView.jsx","components/SelectionMap/selectionMap.jsx","components/ApiKeyDialog/apiKeyDialog.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","display","streetViewInitialLocation","lat","lng","streetViewMapStyles","height","zIndex","StreetView","props","streetViewOptions","addressControl","fullscreenControl","enableCloseButton","linksControl","showRoadLabels","panControl","panControlOptions","position","window","google","maps","ControlPosition","LEFT_BOTTOM","zoomControl","zoomControlOptions","console","log","mapContainerStyle","id","zoom","center","visible","options","mapCcontainer","width","right","bottom","opacity","border","borderColor","transition","SelectionMap","classes","className","clickableIcons","disableDefaultUI","minZoom","restriction","latLngBounds","north","south","west","east","strictBounds","ApiKeyDialog","useState","fieldText","setFieldText","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","defaultValue","apiKey","onChange","event","target","value","fullWidth","DialogActions","Button","onClick","onRunInDeveloperMode","onSubmitApiKey","disabled","length","drawer","typography","flexGrow","drawerButton","left","marginLeft","marginRight","padding","App","setApiKey","apiKeyDialogOpen","setApiKeyDialogOpen","drawerOpen","setDrawerOpen","developerMode","setDeveloperMode","apiButtonText","setApiButtonText","handleClose","toggleDrawer","color","variant","ExpandMore","SwipeableDrawer","anchor","onOpen","swipeAreaWidth","Toolbar","Typography","googleMapsApiKey","newApiKey","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e3d0a3ea.chunk.js","sourcesContent":["import React from 'react'\nimport { GoogleMap, StreetViewPanorama } from '@react-google-maps/api'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  '@global': {\n    'a[href^=\"http://maps.google.com/maps\"]': { display: 'none !important' },\n    'a[href^=\"https://maps.google.com/maps\"]': { display: 'none !important' }\n  }\n})\n\nconst streetViewInitialLocation = {\n  // lat: Math.random() * (90 + 90) - 90,\n  // lng: Math.random() * (180 + 180) - 180\n  lat: 51.072776,\n  lng: -1.313851\n}\n\nconst streetViewMapStyles = {\n  height: '100vh',\n  zIndex: 0\n}\n\nexport default function StreetView (props) {\n  useStyles()\n\n  const streetViewOptions = {\n    addressControl: false,\n    fullscreenControl: false,\n    enableCloseButton: false,\n    linksControl: false,\n    showRoadLabels: false,\n    panControl: true, // Otherwise, it disappears on small screens\n    panControlOptions: {\n      position: window.google.maps.ControlPosition.LEFT_BOTTOM // Find a cleaner way to do this\n    },\n    zoomControl: true,\n    zoomControlOptions: {\n      position: window.google.maps.ControlPosition.LEFT_BOTTOM\n    }\n  }\n\n  console.log('WHY')\n  return (\n    <GoogleMap\n      mapContainerStyle={streetViewMapStyles}\n      id='streetview-map'\n      zoom={7}\n      center={streetViewInitialLocation}\n    >\n      <StreetViewPanorama\n        position={streetViewInitialLocation}\n        visible\n        options={streetViewOptions}\n      />\n    </GoogleMap>\n  )\n}\n\nStreetView.propTypes = {}\n","import React from 'react'\nimport { GoogleMap } from '@react-google-maps/api'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  mapCcontainer: {\n    height: '300px',\n    width: '300px',\n    position: 'absolute',\n    right: 0,\n    bottom: 0,\n    opacity: '50%',\n    border: 'solid',\n    borderColor: 'rgba(0, 0, 0, 0.8)',\n    transition: 'all .2s linear',\n    '&:hover': {\n      height: '500px',\n      width: '500px',\n      opacity: '100%',\n      borderColor: 'rgba(0, 0, 0, 1)'\n    }\n  }\n})\n\nexport default function SelectionMap (props) {\n  const classes = useStyles()\n\n  const mapOptions = {\n    disableDefaultUI: true,\n    minZoom: 1,\n    restriction: {\n      latLngBounds: {\n        north: 85, // For some reason this is not 90 in google maps\n        south: -85,\n        west: -180,\n        east: 180\n      },\n      strictBounds: false\n    }\n  }\n\n  const mapContainerStyle = {\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    right: '0',\n    bottom: '0',\n    zIndex: '10'\n  }\n\n  return (\n    <div className={classes.mapCcontainer}>\n      <GoogleMap\n        id='selection-map'\n        mapContainerStyle={mapContainerStyle}\n        zoom={2}\n        center={{ lat: 0, lng: 0 }}\n        clickableIcons={false}\n        options={mapOptions}\n      />\n    </div>\n  )\n}\n\nSelectionMap.propTypes = {}\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button } from '@material-ui/core'\n\nexport default function ApiKeyDialog (props) {\n  const [fieldText, setFieldText] = useState('')\n\n  const handleOnSubmit = () => {\n    props.onSubmitApiKey(fieldText)\n  }\n\n  const handleOnDeveloper = () => {\n    setFieldText('')\n    props.onRunInDeveloperMode()\n  }\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose} aria-labelledby='form-dialog-title'>\n      <DialogTitle id='form-dialog-title'>Set Api Key</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          To use Google Maps API, please provide an API key. If the API key is invalid, Street View will start in developer mode.\n        </DialogContentText>\n        <TextField\n          autoFocus\n          margin='dense'\n          label='Google Maps API key'\n          defaultValue={props.apiKey ? props.apiKey : fieldText}\n          onChange={event => setFieldText(event.target.value)}\n          fullWidth\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleOnDeveloper}>\n          Run in developer mode\n        </Button>\n        <Button onClick={handleOnSubmit} disabled={fieldText.length === 0}>\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nApiKeyDialog.propTypes = {\n  apiKey: PropTypes.string,\n  open: PropTypes.bool,\n  onClose: PropTypes.func,\n  onSubmitApiKey: PropTypes.func,\n  onRunInDeveloperMode: PropTypes.func\n}\n","import React, { useState } from 'react'\nimport { LoadScript } from '@react-google-maps/api'\nimport StreetView from '../src/components/StreetView/streetView'\nimport SelectionMap from '../src/components/SelectionMap/selectionMap'\nimport ApiKeyDialogOpen from '../src/components/ApiKeyDialog/apiKeyDialog'\nimport { Typography, Toolbar, Button, SwipeableDrawer, makeStyles } from '@material-ui/core'\nimport { ExpandMore } from '@material-ui/icons'\n\nconst SET_TEXT = 'Set Api Key'\nconst CHANGE_TEXT = 'Change Api Key'\n\nconst useStyles = makeStyles({\n  drawer: {\n    display: 'flex'\n  },\n  typography: {\n    flexGrow: 1\n  },\n  drawerButton: {\n    position: 'absolute',\n    width: 'fit-content',\n    left: 0,\n    right: 0,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    padding: '0px',\n    zIndex: 1300,\n    opacity: '70%',\n    transition: '0.2s',\n    '@media (pointer: coarse), (hover: none)': {\n      zIndex: 2\n    },\n    '&:hover': {\n      opacity: '100%'\n    }\n  }\n})\n\nexport default function App () {\n  const classes = useStyles()\n\n  const [apiKey, setApiKey] = useState(null)\n  const [apiKeyDialogOpen, setApiKeyDialogOpen] = useState(true)\n  const [drawerOpen, setDrawerOpen] = useState(false)\n  const [developerMode, setDeveloperMode] = useState(true)\n  const [apiButtonText, setApiButtonText] = useState(SET_TEXT)\n\n  const handleClose = () => {\n    if (!apiKey) {\n      setDeveloperMode(true)\n    }\n    setApiKeyDialogOpen(false)\n  }\n\n  const handleDeveloper = () => {\n    setApiKey(null)\n    setDeveloperMode(true)\n    setApiButtonText(SET_TEXT)\n    handleClose()\n  }\n\n  const handleSubmitApiKey = (newApiKey) => {\n    setApiKey(newApiKey)\n    setDeveloperMode(false)\n    setApiButtonText(CHANGE_TEXT)\n    handleClose()\n  }\n\n  const openApiKeyDialog = () => {\n    setApiKeyDialogOpen(true)\n  }\n\n  const toggleDrawer = (open) => () => {\n    setDrawerOpen(open)\n  }\n\n  const game = () => {\n    return (\n      <LoadScript id='script-loader' googleMapsApiKey={apiKey}>\n        <StreetView />\n        <SelectionMap />\n      </LoadScript>\n    )\n  }\n\n  return (\n    <div className='App'>\n      <Button\n        className={classes.drawerButton}\n        onClick={toggleDrawer(true)}\n        color='inherit'\n        variant='contained'\n      >\n        <ExpandMore />\n      </Button>\n      <SwipeableDrawer\n        className={classes.drawer}\n        anchor='top'\n        open={drawerOpen}\n        onClose={toggleDrawer(false)}\n        onOpen={toggleDrawer(true)}\n        swipeAreaWidth={50}\n      >\n        <Toolbar>\n          <Typography className={classes.typography} variant='h4'>Not Geoguessr</Typography>\n          <Button onClick={openApiKeyDialog} color='inherit'>{apiButtonText}</Button>\n        </Toolbar>\n      </SwipeableDrawer>\n      {(developerMode || apiKey) && !apiKeyDialogOpen && game()}\n      <ApiKeyDialogOpen\n        apiKey={apiKey}\n        open={apiKeyDialogOpen}\n        onClose={handleClose}\n        onRunInDeveloperMode={handleDeveloper}\n        onSubmitApiKey={handleSubmitApiKey}\n      />\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}